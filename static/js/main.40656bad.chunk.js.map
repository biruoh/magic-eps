{"version":3,"sources":["Header.js","Popup.js","Footer.js","AddMetadata.js","App.js","serviceWorker.js","index.js","upload-file.png"],"names":["Header","className","Popup","this","props","text","onClick","closePopup","React","Component","Footer","state","showPopup","setState","id","togglePopup","bind","AddMetadata","showFile","event","previewFile","document","getElementById","file","target","files","filename","name","reader","FileReader","scope","onload","e","source","result","innerHTML","console","log","readAsText","title","description","keyword","handleChange","handleSubmit","value","data","preventDefault","split","length","Map","Object","entries","lines","firstStr","map","line","join","keywordList","key","lasttStr","slice","element","createElement","metadata","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","onSubmit","src","uploadFile","alt","required","accept","onChange","maxLength","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"6KAEe,SAASA,IACtB,OACE,yBAAKC,UAAU,UACb,yCACA,oF,gCCUSC,E,uKAZX,OACE,yBAAKD,UAAU,SACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,gBAAgBE,KAAKC,MAAMC,MACzC,4BAAQC,QAASH,KAAKC,MAAMG,YAA5B,e,GANUC,IAAMC,WC8BXC,E,kDA3Bb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CAAEC,WAAW,GAFT,E,0DAMhBT,KAAKU,SAAS,CACZD,WAAYT,KAAKQ,MAAMC,c,+BAK1B,OACE,yBAAKX,UAAU,UACb,yBAAKa,GAAG,aAAR,kEACA,4BAAQb,UAAU,eAAeK,QAASH,KAAKY,YAAYC,KAAKb,OAAhE,gBACIA,KAAKQ,MAAMC,UACV,kBAAC,EAAD,CACCP,KAAK,eACLE,WAAYJ,KAAKY,YAAYC,KAAKb,QAEjC,U,GAvBMM,a,uBC4LNQ,E,kDA3Lb,aAAe,IAAD,8BACZ,gBAaFC,SAAW,SAASC,GAClB,IAAMC,EAAcC,SAASC,eAAe,YACtCC,EAAOJ,EAAMK,OAAOC,MAAM,GAC1BC,EAAWP,EAAMK,OAAOC,MAAM,GAAGE,KACjCC,EAAS,IAAIC,WACbC,EAAQ3B,KACdyB,EAAOG,OAAS,SAASC,GACvB,IAAMC,EAASL,EAAOM,OACtBJ,EAAMjB,SAAS,CAAER,KAAM4B,EAAQV,KAAMG,IACrCN,EAAYe,UAAYT,EAExBU,QAAQC,IAAI,yBACZD,QAAQC,IAAI,cAAgBX,IAE9BE,EAAOU,WAAWf,IA1BlB,EAAKZ,MAAQ,CACXY,KAAM,GACNlB,KAAM,GACNkC,MAAO,GACPC,YAAa,GACbC,QAAS,IAEX,EAAKvB,SAAW,EAAKA,SAASF,KAAd,gBAChB,EAAK0B,aAAe,EAAKA,aAAa1B,KAAlB,gBACpB,EAAK2B,aAAe,EAAKA,aAAa3B,KAAlB,gBAXR,E,yDA+BDG,GACX,OAAO,SAASa,GACd,IAAMrB,EAAQ,GACdA,EAAMQ,GAASa,EAAER,OAAOoB,MACxBzC,KAAKU,SAASF,IACdK,KAAKb,Q,mCAGIgB,GACX,IAAM0B,EAAO,CACXtB,KAAMpB,KAAKQ,MAAMY,KACjBlB,KAAMF,KAAKQ,MAAMN,KACjBkC,MAAOpC,KAAKQ,MAAM4B,MAClBC,YAAarC,KAAKQ,MAAM6B,YACxBC,QAAStC,KAAKQ,MAAM8B,SAGtBL,QAAQC,IACN,UACEQ,EAAKN,MACL,kBACAM,EAAKL,YACL,cACAK,EAAKJ,SAGTtB,EAAM2B,iBAENV,QAAQC,IACNQ,EAAKJ,QAAQM,MAAM,SAASC,OAC5B,IAAIC,IAAIC,OAAOC,QAAQN,EAAKJ,QAAQM,MAAM,YAI5C,IAAMK,EAAQP,EAAKxC,KAAK0C,MAAM,MAC9BX,QAAQC,IAAIe,EAAMJ,QAElB,IAAMK,EAAWR,EAAKxC,KACnB0C,MAAM,KAAM,IACZO,KAAI,SAASC,GACZ,OAAOA,EAAO,QAEfC,KAAK,IAEFC,EAAcZ,EAAKJ,QACtBM,MAAM,SACNO,KAAI,SAASI,GACZ,MAAO,mBAAqBA,EAAM,eAEnCF,KAAK,IAEFG,EAAWd,EAAKxC,KACnB0C,MAAM,MACNa,MAAM,IACNN,KAAI,SAASC,GACZ,OAAOA,EAAO,QAEfC,KAAK,IAEFK,EAAUxC,SAASyC,cAAc,KACjCC,EAAW,IAAIC,KACnB,CACEX,EACE,sHAIAR,EAAKN,MACL,mHAMAM,EAAKL,YACL,gFAKAiB,EACA,wCAEAE,GAEJ,CACEM,KAAM,aAGVJ,EAAQK,KAAOC,IAAIC,gBAAgBL,GACnCF,EAAQQ,SAAW,aAAexB,EAAKtB,KACvCF,SAASiD,KAAKC,YAAYV,GAC1BA,EAAQW,U,+BAIR,OACE,yBAAKvE,UAAU,eACb,0BAAMwE,SAAUtE,KAAKwC,cACnB,2BAAO1C,UAAU,cACf,yBAAKA,UAAU,YAAYyE,IAAKC,IAAYC,IAAI,gBAChD,yBAAK9D,GAAG,YAAR,sBACA,2BACE+D,UAAQ,EACRZ,KAAK,OACLa,OAAO,OACPC,SAAU5E,KAAKe,WAEjB,yBACES,KAAK,OACLb,GAAG,WACH8B,MAAOzC,KAAKQ,MAAMN,KAClB0E,SAAU5E,KAAKuC,aAAa,WAGhC,+BACE,2BACEmC,UAAQ,EACRZ,KAAK,OACLe,UAAW,IACXrD,KAAK,QACLb,GAAG,YACHmE,YAAa,QACbrC,MAAOzC,KAAKQ,MAAM4B,MAClBwC,SAAU5E,KAAKuC,aAAa,YAGhC,+BACE,2BACEmC,UAAQ,EACRZ,KAAK,OACLe,UAAW,IACXrD,KAAK,cACLb,GAAG,kBACHmE,YAAa,cACbrC,MAAOzC,KAAKQ,MAAM6B,YAClBuC,SAAU5E,KAAKuC,aAAa,kBAGhC,+BACE,8BACEmC,UAAQ,EACRlD,KAAK,UACLb,GAAG,cACHmE,YAAa,8BACbrC,MAAOzC,KAAKQ,MAAM8B,QAClBsC,SAAU5E,KAAKuC,aAAa,cAGhC,2BAAOuB,KAAK,SAASnD,GAAG,UAAU8B,MAAM,4B,GArLxBnC,aCEX,SAASyE,IACtB,OACE,yBAAKjF,UAAU,OACb,kBAACD,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,O,MCEcmF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACR,EAAD,OAEF7D,SAASC,eAAe,SDyHpB,kBAAmBqE,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.40656bad.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Header() {\n  return (\n    <div className=\"Header\">\n      <h1>MAGIC EPS</h1>\n      <h2>Start adding EPS metadata to see some magic happen!</h2>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\n\nclass Popup extends React.Component {\n  render() {\n    return (\n      <div className=\"popup\">\n        <div className=\"popup_inner\">\n          <h1 className=\"popup-header\">{this.props.text}</h1>\n          <button onClick={this.props.closePopup}>Close</button>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default Popup;\n","import React, { Component } from \"react\";\nimport Popup from './Popup';\n\nclass Footer extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { showPopup: false };\n    }\n\n    togglePopup() {\n     this.setState({\n       showPopup: !this.state.showPopup\n     });\n   }\n\n  render () {\n    return (\n      <div className=\"Footer\">\n        <div id=\"copyright\">Copyright Â© 2020 Phatthranit Osman. All rights reserved. | </div>\n        <button className=\"contributors\" onClick={this.togglePopup.bind(this)}>Contributors</button>\n           {this.state.showPopup ?\n             <Popup\n              text='Contributors'\n              closePopup={this.togglePopup.bind(this)}\n             />\n             : null\n           }\n      </div>\n    );\n  }\n}\nexport default Footer;\n","import React, { Component } from \"react\";\nimport uploadFile from \"./upload-file.png\";\n\nclass AddMetadata extends Component {\n  constructor() {\n    super();\n    this.state = {\n      file: \"\",\n      text: \"\",\n      title: \"\",\n      description: \"\",\n      keyword: \"\"\n    };\n    this.showFile = this.showFile.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  showFile = function(event) {\n    const previewFile = document.getElementById(\"fileName\");\n    const file = event.target.files[0];\n    const filename = event.target.files[0].name;\n    const reader = new FileReader();\n    const scope = this;\n    reader.onload = function(e) {\n      const source = reader.result;\n      scope.setState({ text: source, file: filename });\n      previewFile.innerHTML = filename;\n\n      console.log(\"EPS file is ready >>>\");\n      console.log(\"File name: \" + filename);\n    };\n    reader.readAsText(file);\n  };\n\n  handleChange(event) {\n    return function(e) {\n      const state = {};\n      state[event] = e.target.value;\n      this.setState(state);\n    }.bind(this);\n  }\n\n  handleSubmit(event) {\n    const data = {\n      file: this.state.file,\n      text: this.state.text,\n      title: this.state.title,\n      description: this.state.description,\n      keyword: this.state.keyword\n    };\n\n    console.log(\n      \"Title: \" +\n        data.title +\n        \"\\nDescription: \" +\n        data.description +\n        \"\\nKeyword: \" +\n        data.keyword\n    );\n\n    event.preventDefault();\n\n    console.log(\n      data.keyword.split(/[ ,]+/).length,\n      new Map(Object.entries(data.keyword.split(/[ ,]+/)))\n    );\n    // /\\s,|,\\s/\n\n    const lines = data.text.split(/\\n/);\n    console.log(lines.length);\n\n    const firstStr = data.text\n      .split(/\\n/, 48)\n      .map(function(line) {\n        return line + \"\\n\";\n      })\n      .join(\"\");\n\n    const keywordList = data.keyword\n      .split(/[ ,]+/)\n      .map(function(key) {\n        return \"\\n\\t\\t\\t<rdf:li>\" + key + \"</rdf:li>\";\n      })\n      .join(\"\");\n\n    const lasttStr = data.text\n      .split(/\\n/)\n      .slice(49)\n      .map(function(line) {\n        return line + \"\\n\";\n      })\n      .join(\"\");\n\n    const element = document.createElement(\"a\");\n    const metadata = new Blob(\n      [\n        firstStr +\n          \"\\n\\t<dc:format>application/postscript</dc:format>\" +\n          \"\\n\\t<dc:title>\" +\n          \"\\n\\t\\t<rdf:Alt>\" +\n          '\\n\\t\\t\\t<rdf:li xml:lang=\"x-default\">' +\n          data.title +\n          \"</rdf:li>\" +\n          \"\\n\\t\\t</rdf:Alt>\" +\n          \"\\n\\t</dc:title>\" +\n          \"\\n\\t<dc:description>\" +\n          \"\\n\\t\\t<rdf:Alt>\" +\n          '\\n\\t\\t\\t<rdf:li xml:lang=\"x-default\">' +\n          data.description +\n          \"</rdf:li>\" +\n          \"\\n\\t\\t</rdf:Alt>\" +\n          \"\\n\\t</dc:description>\" +\n          \"\\n\\t<dc:subject>\" +\n          \"\\n\\t\\t<rdf:Bag>\" +\n          keywordList +\n          \"\\n\\t\\t</rdf:Bag>\" +\n          \"\\n\\t</dc:subject>\\n\\n\" +\n          lasttStr\n      ],\n      {\n        type: \"text/eps\"\n      }\n    );\n    element.href = URL.createObjectURL(metadata);\n    element.download = \"Magic-EPS-\" + data.file;\n    document.body.appendChild(element);\n    element.click();\n  }\n\n  render() {\n    return (\n      <div className=\"mainContent\">\n        <form onSubmit={this.handleSubmit}>\n          <label className=\"uploadFile\">\n            <img className=\"uploadImg\" src={uploadFile} alt=\"Upload File\" />\n            <div id=\"fileName\">Choose an EPS File</div>\n            <input\n              required\n              type=\"file\"\n              accept=\".eps\"\n              onChange={this.showFile}\n            />\n            <div\n              name=\"text\"\n              id=\"metaFile\"\n              value={this.state.text}\n              onChange={this.handleChange(\"text\")}\n            />\n          </label>\n          <label>\n            <input\n              required\n              type=\"text\"\n              maxLength={200}\n              name=\"title\"\n              id=\"metaTitle\"\n              placeholder={\"Title\"}\n              value={this.state.title}\n              onChange={this.handleChange(\"title\")}\n            />\n          </label>\n          <label>\n            <input\n              required\n              type=\"text\"\n              maxLength={200}\n              name=\"description\"\n              id=\"metaDescription\"\n              placeholder={\"Description\"}\n              value={this.state.description}\n              onChange={this.handleChange(\"description\")}\n            />\n          </label>\n          <label>\n            <textarea\n              required\n              name=\"keyword\"\n              id=\"metaKeyword\"\n              placeholder={\"Enter your keywords here...\"}\n              value={this.state.keyword}\n              onChange={this.handleChange(\"keyword\")}\n            />\n          </label>\n          <input type=\"submit\" id=\"addMeta\" value=\"Download EPS File\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default AddMetadata;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport AddMetadata from \"./AddMetadata\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <AddMetadata />\n      <Footer />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./styles.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/upload-file.1fec5a8d.png\";"],"sourceRoot":""}